---
import CarrouselCards from "./CarrouselCards.vue"
---
<section
  id="seccionInvestigacionesDestacadas"
  class="py-8 bg-white text-center"
>
  <div
    id="tercer_texto_programas_investigacion"
    class="p-6 flex flex-col justify-center items-center text-center rounded-lg shadow-none transition-all duration-1000 opacity-0 translate-y-8"
  >
    <p
      class="text-2xl sm:text-xl md:text-2xl lg:text-4xl font-bold text-gray-800 "
    >
      Investigaciones Destacadas
    </p>

    <p class="text-sm md:text-lg lg:text-2xl text-gray-800 text-center mt-5">
      Nuestras líneas de investigación abordan los prinicipales retos sociales,
      ambientales y económicos. A través de enfoques innovadores y
      multidisciplinarios, buscamos generar soluciones prácticas que contribuyan
      al desarrollo sostenible y la mejora de la calidad de vida.
    </p>
  </div>

  <div
    id="cuarto_texto_programas_investigacion"
    class="w-full bg-gradient-to-r from-white to-blue-900 py-1 overflow-hidden transition-all duration-1000 opacity-0 translate-y-8"
  >
    <CarrouselCards client:load/>
  </div>
</section>

<script>
  const targets = document.querySelectorAll(
    "#tercer_texto_programas_investigacion, #cuarto_texto_programas_investigacion"
  );

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove("opacity-0", "translate-y-8");
          entry.target.classList.add("opacity-100", "translate-y-0");
        }
      });
    },
    {
      threshold: 0.1,
    }
  );

  targets.forEach((target) => observer.observe(target));

  const track = document.getElementById("carousel-track") as HTMLElement;
  const items = [...track.children];
  const totalItems = items.length;

  // Duplica los items
  for (let i = 0; i < totalItems; i++) {
    const clone = items[i].cloneNode(true);
    track.appendChild(clone);
  }

  let scrollX = 0;
  const speed = 0.5; // velocidad del desplazamiento

  function animate() {
    scrollX += speed;
    track.style.transform = `translateX(-${scrollX}px)`;

    // Reinicia cuando haya recorrido el largo de los originales
    const maxScroll = track.scrollWidth / 2;
    if (scrollX >= maxScroll) {
      scrollX = 0;
    }

    requestAnimationFrame(animate);
  }

  animate();
</script>
